// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: api/envoy/v12/http/service_control/config.proto

package service_control

import (
	common "github.com/GoogleCloudPlatform/esp-v2/src/go/proto/api/envoy/v12/http/common"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	serviceconfig "google.golang.org/genproto/googleapis/api/serviceconfig"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceControlCallingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkFailOpen *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=network_fail_open,json=networkFailOpen,proto3" json:"network_fail_open,omitempty"`
	CheckTimeoutMs  *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=check_timeout_ms,json=checkTimeoutMs,proto3" json:"check_timeout_ms,omitempty"`
	QuotaTimeoutMs  *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=quota_timeout_ms,json=quotaTimeoutMs,proto3" json:"quota_timeout_ms,omitempty"`
	ReportTimeoutMs *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=report_timeout_ms,json=reportTimeoutMs,proto3" json:"report_timeout_ms,omitempty"`
	CheckRetries    *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=check_retries,json=checkRetries,proto3" json:"check_retries,omitempty"`
	QuotaRetries    *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=quota_retries,json=quotaRetries,proto3" json:"quota_retries,omitempty"`
	ReportRetries   *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=report_retries,json=reportRetries,proto3" json:"report_retries,omitempty"`
}

func (x *ServiceControlCallingConfig) Reset() {
	*x = ServiceControlCallingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceControlCallingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceControlCallingConfig) ProtoMessage() {}

func (x *ServiceControlCallingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceControlCallingConfig.ProtoReflect.Descriptor instead.
func (*ServiceControlCallingConfig) Descriptor() ([]byte, []int) {
	return file_api_envoy_v12_http_service_control_config_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceControlCallingConfig) GetNetworkFailOpen() *wrapperspb.BoolValue {
	if x != nil {
		return x.NetworkFailOpen
	}
	return nil
}

func (x *ServiceControlCallingConfig) GetCheckTimeoutMs() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CheckTimeoutMs
	}
	return nil
}

func (x *ServiceControlCallingConfig) GetQuotaTimeoutMs() *wrapperspb.UInt32Value {
	if x != nil {
		return x.QuotaTimeoutMs
	}
	return nil
}

func (x *ServiceControlCallingConfig) GetReportTimeoutMs() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ReportTimeoutMs
	}
	return nil
}

func (x *ServiceControlCallingConfig) GetCheckRetries() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CheckRetries
	}
	return nil
}

func (x *ServiceControlCallingConfig) GetQuotaRetries() *wrapperspb.UInt32Value {
	if x != nil {
		return x.QuotaRetries
	}
	return nil
}

func (x *ServiceControlCallingConfig) GetReportRetries() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ReportRetries
	}
	return nil
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName                 string                 `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceConfigId             string                 `protobuf:"bytes,2,opt,name=service_config_id,json=serviceConfigId,proto3" json:"service_config_id,omitempty"`
	ProducerProjectId           string                 `protobuf:"bytes,3,opt,name=producer_project_id,json=producerProjectId,proto3" json:"producer_project_id,omitempty"`
	ServiceConfig               *serviceconfig.Service `protobuf:"bytes,4,opt,name=service_config,json=serviceConfig,proto3" json:"service_config,omitempty"`
	BackendProtocol             string                 `protobuf:"bytes,5,opt,name=backend_protocol,json=backendProtocol,proto3" json:"backend_protocol,omitempty"`
	LogRequestHeaders           []string               `protobuf:"bytes,6,rep,name=log_request_headers,json=logRequestHeaders,proto3" json:"log_request_headers,omitempty"`
	LogResponseHeaders          []string               `protobuf:"bytes,7,rep,name=log_response_headers,json=logResponseHeaders,proto3" json:"log_response_headers,omitempty"`
	MinStreamReportIntervalMs   uint64                 `protobuf:"varint,8,opt,name=min_stream_report_interval_ms,json=minStreamReportIntervalMs,proto3" json:"min_stream_report_interval_ms,omitempty"`
	LogJwtPayloads              []string               `protobuf:"bytes,9,rep,name=log_jwt_payloads,json=logJwtPayloads,proto3" json:"log_jwt_payloads,omitempty"`
	JwtPayloadMetadataName      string                 `protobuf:"bytes,10,opt,name=jwt_payload_metadata_name,json=jwtPayloadMetadataName,proto3" json:"jwt_payload_metadata_name,omitempty"`
	ClientIpFromForwardedHeader bool                   `protobuf:"varint,11,opt,name=client_ip_from_forwarded_header,json=clientIpFromForwardedHeader,proto3" json:"client_ip_from_forwarded_header,omitempty"`
	TracingProjectId            string                 `protobuf:"bytes,12,opt,name=tracing_project_id,json=tracingProjectId,proto3" json:"tracing_project_id,omitempty"`
	TracingDisabled             bool                   `protobuf:"varint,13,opt,name=tracing_disabled,json=tracingDisabled,proto3" json:"tracing_disabled,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_api_envoy_v12_http_service_control_config_proto_rawDescGZIP(), []int{1}
}

func (x *Service) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Service) GetServiceConfigId() string {
	if x != nil {
		return x.ServiceConfigId
	}
	return ""
}

func (x *Service) GetProducerProjectId() string {
	if x != nil {
		return x.ProducerProjectId
	}
	return ""
}

func (x *Service) GetServiceConfig() *serviceconfig.Service {
	if x != nil {
		return x.ServiceConfig
	}
	return nil
}

func (x *Service) GetBackendProtocol() string {
	if x != nil {
		return x.BackendProtocol
	}
	return ""
}

func (x *Service) GetLogRequestHeaders() []string {
	if x != nil {
		return x.LogRequestHeaders
	}
	return nil
}

func (x *Service) GetLogResponseHeaders() []string {
	if x != nil {
		return x.LogResponseHeaders
	}
	return nil
}

func (x *Service) GetMinStreamReportIntervalMs() uint64 {
	if x != nil {
		return x.MinStreamReportIntervalMs
	}
	return 0
}

func (x *Service) GetLogJwtPayloads() []string {
	if x != nil {
		return x.LogJwtPayloads
	}
	return nil
}

func (x *Service) GetJwtPayloadMetadataName() string {
	if x != nil {
		return x.JwtPayloadMetadataName
	}
	return ""
}

func (x *Service) GetClientIpFromForwardedHeader() bool {
	if x != nil {
		return x.ClientIpFromForwardedHeader
	}
	return false
}

func (x *Service) GetTracingProjectId() string {
	if x != nil {
		return x.TracingProjectId
	}
	return ""
}

func (x *Service) GetTracingDisabled() bool {
	if x != nil {
		return x.TracingDisabled
	}
	return false
}

type GcpAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Zone      string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
	Platform  string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *GcpAttributes) Reset() {
	*x = GcpAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpAttributes) ProtoMessage() {}

func (x *GcpAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpAttributes.ProtoReflect.Descriptor instead.
func (*GcpAttributes) Descriptor() ([]byte, []int) {
	return file_api_envoy_v12_http_service_control_config_proto_rawDescGZIP(), []int{2}
}

func (x *GcpAttributes) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GcpAttributes) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *GcpAttributes) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type FilterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services      []*Service     `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	Requirements  []*Requirement `protobuf:"bytes,2,rep,name=requirements,proto3" json:"requirements,omitempty"`
	GcpAttributes *GcpAttributes `protobuf:"bytes,3,opt,name=gcp_attributes,json=gcpAttributes,proto3" json:"gcp_attributes,omitempty"`
	// Types that are assignable to AccessToken:
	//	*FilterConfig_ImdsToken
	//	*FilterConfig_IamToken
	AccessToken           isFilterConfig_AccessToken     `protobuf_oneof:"access_token"`
	ScCallingConfig       *ServiceControlCallingConfig   `protobuf:"bytes,7,opt,name=sc_calling_config,json=scCallingConfig,proto3" json:"sc_calling_config,omitempty"`
	ServiceControlUri     *common.HttpUri                `protobuf:"bytes,8,opt,name=service_control_uri,json=serviceControlUri,proto3" json:"service_control_uri,omitempty"`
	GeneratedHeaderPrefix string                         `protobuf:"bytes,9,opt,name=generated_header_prefix,json=generatedHeaderPrefix,proto3" json:"generated_header_prefix,omitempty"`
	DepErrorBehavior      common.DependencyErrorBehavior `protobuf:"varint,10,opt,name=dep_error_behavior,json=depErrorBehavior,proto3,enum=espv2.api.envoy.v12.http.common.DependencyErrorBehavior" json:"dep_error_behavior,omitempty"`
}

func (x *FilterConfig) Reset() {
	*x = FilterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterConfig) ProtoMessage() {}

func (x *FilterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterConfig.ProtoReflect.Descriptor instead.
func (*FilterConfig) Descriptor() ([]byte, []int) {
	return file_api_envoy_v12_http_service_control_config_proto_rawDescGZIP(), []int{3}
}

func (x *FilterConfig) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *FilterConfig) GetRequirements() []*Requirement {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *FilterConfig) GetGcpAttributes() *GcpAttributes {
	if x != nil {
		return x.GcpAttributes
	}
	return nil
}

func (m *FilterConfig) GetAccessToken() isFilterConfig_AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

func (x *FilterConfig) GetImdsToken() *common.HttpUri {
	if x, ok := x.GetAccessToken().(*FilterConfig_ImdsToken); ok {
		return x.ImdsToken
	}
	return nil
}

func (x *FilterConfig) GetIamToken() *common.IamTokenInfo {
	if x, ok := x.GetAccessToken().(*FilterConfig_IamToken); ok {
		return x.IamToken
	}
	return nil
}

func (x *FilterConfig) GetScCallingConfig() *ServiceControlCallingConfig {
	if x != nil {
		return x.ScCallingConfig
	}
	return nil
}

func (x *FilterConfig) GetServiceControlUri() *common.HttpUri {
	if x != nil {
		return x.ServiceControlUri
	}
	return nil
}

func (x *FilterConfig) GetGeneratedHeaderPrefix() string {
	if x != nil {
		return x.GeneratedHeaderPrefix
	}
	return ""
}

func (x *FilterConfig) GetDepErrorBehavior() common.DependencyErrorBehavior {
	if x != nil {
		return x.DepErrorBehavior
	}
	return common.DependencyErrorBehavior(0)
}

type isFilterConfig_AccessToken interface {
	isFilterConfig_AccessToken()
}

type FilterConfig_ImdsToken struct {
	ImdsToken *common.HttpUri `protobuf:"bytes,4,opt,name=imds_token,json=imdsToken,proto3,oneof"`
}

type FilterConfig_IamToken struct {
	IamToken *common.IamTokenInfo `protobuf:"bytes,6,opt,name=iam_token,json=iamToken,proto3,oneof"`
}

func (*FilterConfig_ImdsToken) isFilterConfig_AccessToken() {}

func (*FilterConfig_IamToken) isFilterConfig_AccessToken() {}

type PerRouteFilterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationName string `protobuf:"bytes,1,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
}

func (x *PerRouteFilterConfig) Reset() {
	*x = PerRouteFilterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerRouteFilterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerRouteFilterConfig) ProtoMessage() {}

func (x *PerRouteFilterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_envoy_v12_http_service_control_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerRouteFilterConfig.ProtoReflect.Descriptor instead.
func (*PerRouteFilterConfig) Descriptor() ([]byte, []int) {
	return file_api_envoy_v12_http_service_control_config_proto_rawDescGZIP(), []int{4}
}

func (x *PerRouteFilterConfig) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

var File_api_envoy_v12_http_service_control_config_proto protoreflect.FileDescriptor

var file_api_envoy_v12_http_service_control_config_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x76, 0x31, 0x32, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x28, 0x65, 0x73, 0x70, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x32, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x34, 0x61, 0x70, 0x69,
	0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x76, 0x31, 0x32, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f,
	0x76, 0x31, 0x32, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x04, 0x0a, 0x1b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x11, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x4d, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x41, 0x0a, 0x0d,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd0, 0x05, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0xc0, 0x01, 0x01,
	0x52, 0x11, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0xc0, 0x01, 0x01,
	0x52, 0x12, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x6a, 0x77,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x4a, 0x77, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x12, 0x39, 0x0a, 0x19, 0x6a, 0x77, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x6a, 0x77, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x46, 0x72,
	0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x0d, 0x47, 0x63,
	0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xcf, 0x06, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x65, 0x73, 0x70, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x32, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x65, 0x73, 0x70, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x32, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x0e, 0x67, 0x63, 0x70, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x65, 0x73, 0x70, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x32, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x63, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x67, 0x63, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6d, 0x64, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x73, 0x70, 0x76,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x32, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x64, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x4c, 0x0a, 0x09, 0x69, 0x61, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x73, 0x70, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x32, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x69, 0x61, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x71,
	0x0a, 0x11, 0x73, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x65, 0x73, 0x70, 0x76,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x32, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0f, 0x73, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x62, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x65, 0x73, 0x70, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x32, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x55, 0x72, 0x69, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x42, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0xc0,
	0x01, 0x01, 0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x66, 0x0a, 0x12, 0x64, 0x65, 0x70,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x65, 0x73, 0x70, 0x76, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x32, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x10, 0x64, 0x65, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x42, 0x13, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x46, 0x0a, 0x14,
	0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_envoy_v12_http_service_control_config_proto_rawDescOnce sync.Once
	file_api_envoy_v12_http_service_control_config_proto_rawDescData = file_api_envoy_v12_http_service_control_config_proto_rawDesc
)

func file_api_envoy_v12_http_service_control_config_proto_rawDescGZIP() []byte {
	file_api_envoy_v12_http_service_control_config_proto_rawDescOnce.Do(func() {
		file_api_envoy_v12_http_service_control_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_envoy_v12_http_service_control_config_proto_rawDescData)
	})
	return file_api_envoy_v12_http_service_control_config_proto_rawDescData
}

var file_api_envoy_v12_http_service_control_config_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_envoy_v12_http_service_control_config_proto_goTypes = []interface{}{
	(*ServiceControlCallingConfig)(nil), // 0: espv2.api.envoy.v12.http.service_control.ServiceControlCallingConfig
	(*Service)(nil),                     // 1: espv2.api.envoy.v12.http.service_control.Service
	(*GcpAttributes)(nil),               // 2: espv2.api.envoy.v12.http.service_control.GcpAttributes
	(*FilterConfig)(nil),                // 3: espv2.api.envoy.v12.http.service_control.FilterConfig
	(*PerRouteFilterConfig)(nil),        // 4: espv2.api.envoy.v12.http.service_control.PerRouteFilterConfig
	(*wrapperspb.BoolValue)(nil),        // 5: google.protobuf.BoolValue
	(*wrapperspb.UInt32Value)(nil),      // 6: google.protobuf.UInt32Value
	(*serviceconfig.Service)(nil),       // 7: google.api.Service
	(*Requirement)(nil),                 // 8: espv2.api.envoy.v12.http.service_control.Requirement
	(*common.HttpUri)(nil),              // 9: espv2.api.envoy.v12.http.common.HttpUri
	(*common.IamTokenInfo)(nil),         // 10: espv2.api.envoy.v12.http.common.IamTokenInfo
	(common.DependencyErrorBehavior)(0), // 11: espv2.api.envoy.v12.http.common.DependencyErrorBehavior
}
var file_api_envoy_v12_http_service_control_config_proto_depIdxs = []int32{
	5,  // 0: espv2.api.envoy.v12.http.service_control.ServiceControlCallingConfig.network_fail_open:type_name -> google.protobuf.BoolValue
	6,  // 1: espv2.api.envoy.v12.http.service_control.ServiceControlCallingConfig.check_timeout_ms:type_name -> google.protobuf.UInt32Value
	6,  // 2: espv2.api.envoy.v12.http.service_control.ServiceControlCallingConfig.quota_timeout_ms:type_name -> google.protobuf.UInt32Value
	6,  // 3: espv2.api.envoy.v12.http.service_control.ServiceControlCallingConfig.report_timeout_ms:type_name -> google.protobuf.UInt32Value
	6,  // 4: espv2.api.envoy.v12.http.service_control.ServiceControlCallingConfig.check_retries:type_name -> google.protobuf.UInt32Value
	6,  // 5: espv2.api.envoy.v12.http.service_control.ServiceControlCallingConfig.quota_retries:type_name -> google.protobuf.UInt32Value
	6,  // 6: espv2.api.envoy.v12.http.service_control.ServiceControlCallingConfig.report_retries:type_name -> google.protobuf.UInt32Value
	7,  // 7: espv2.api.envoy.v12.http.service_control.Service.service_config:type_name -> google.api.Service
	1,  // 8: espv2.api.envoy.v12.http.service_control.FilterConfig.services:type_name -> espv2.api.envoy.v12.http.service_control.Service
	8,  // 9: espv2.api.envoy.v12.http.service_control.FilterConfig.requirements:type_name -> espv2.api.envoy.v12.http.service_control.Requirement
	2,  // 10: espv2.api.envoy.v12.http.service_control.FilterConfig.gcp_attributes:type_name -> espv2.api.envoy.v12.http.service_control.GcpAttributes
	9,  // 11: espv2.api.envoy.v12.http.service_control.FilterConfig.imds_token:type_name -> espv2.api.envoy.v12.http.common.HttpUri
	10, // 12: espv2.api.envoy.v12.http.service_control.FilterConfig.iam_token:type_name -> espv2.api.envoy.v12.http.common.IamTokenInfo
	0,  // 13: espv2.api.envoy.v12.http.service_control.FilterConfig.sc_calling_config:type_name -> espv2.api.envoy.v12.http.service_control.ServiceControlCallingConfig
	9,  // 14: espv2.api.envoy.v12.http.service_control.FilterConfig.service_control_uri:type_name -> espv2.api.envoy.v12.http.common.HttpUri
	11, // 15: espv2.api.envoy.v12.http.service_control.FilterConfig.dep_error_behavior:type_name -> espv2.api.envoy.v12.http.common.DependencyErrorBehavior
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_envoy_v12_http_service_control_config_proto_init() }
func file_api_envoy_v12_http_service_control_config_proto_init() {
	if File_api_envoy_v12_http_service_control_config_proto != nil {
		return
	}
	file_api_envoy_v12_http_service_control_requirement_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_envoy_v12_http_service_control_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceControlCallingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_envoy_v12_http_service_control_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_envoy_v12_http_service_control_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_envoy_v12_http_service_control_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_envoy_v12_http_service_control_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerRouteFilterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_envoy_v12_http_service_control_config_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*FilterConfig_ImdsToken)(nil),
		(*FilterConfig_IamToken)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_envoy_v12_http_service_control_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_envoy_v12_http_service_control_config_proto_goTypes,
		DependencyIndexes: file_api_envoy_v12_http_service_control_config_proto_depIdxs,
		MessageInfos:      file_api_envoy_v12_http_service_control_config_proto_msgTypes,
	}.Build()
	File_api_envoy_v12_http_service_control_config_proto = out.File
	file_api_envoy_v12_http_service_control_config_proto_rawDesc = nil
	file_api_envoy_v12_http_service_control_config_proto_goTypes = nil
	file_api_envoy_v12_http_service_control_config_proto_depIdxs = nil
}
